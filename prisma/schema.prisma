// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  SP_ADMIN
  CT_ADMIN
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  DELIVERED
  CANCELLED
}

model User {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(50)
  email      String       @unique
  password   String       @db.Text
  org        Organization @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  org_id     Int
  role       Role         @default(USER)
  orders     Order[]
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  @@map("user")
}

model Organization {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(255)
  credit     Int      @default(5000)
  users      User[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("organization")
}

model Food {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(255)
  rate           Float            @db.Float()
  description    String?          @db.VarChar(1000)
  image          String           @default("default.png")
  start_time     DateTime         @db.DateTime()
  end_time       DateTime         @db.DateTime()
  is_menu        Boolean          @default(true)
  quantity       Int              @default(0)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  food_category  Food_Category    @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category_id    Int
  food_food_type Food_Food_Type[]
  orders         Order[]

  @@map("food")
}

model Food_Category {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(50)
  foods      Food[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("food_category")
}

model Food_Type {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(50)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  food_food_type Food_Food_Type[]

  @@map("food_type")
}

model Food_Food_Type {
  food      Food      @relation(fields: [food_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  food_id   Int
  food_type Food_Type @relation(fields: [type_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type_id   Int

  @@id([food_id, type_id])
  @@map("food_food_type")
}

model Order {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [user_id], references: [id])
  user_id    Int
  food       Food        @relation(fields: [food_id], references: [id])
  food_id    Int
  quantity   Int
  rate       Float       @db.Float()
  status     OrderStatus @default(PENDING)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt

  @@map("order")
}
